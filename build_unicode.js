// const categoryMap = require('@unicode/unicode-15.1.0/General_Category')
// const categories = Array.from(new Set(categoryMap.values())).sort()
const categories = [
  "Close_Punctuation",
  "Connector_Punctuation",
  "Control",
  "Currency_Symbol",
  "Dash_Punctuation",
  "Decimal_Number",
  "Enclosing_Mark",
  "Final_Punctuation",
  "Format",
  "Initial_Punctuation",
  "Letter_Number",
  "Line_Separator",
  "Lowercase_Letter",
  "Math_Symbol",
  "Modifier_Letter",
  "Modifier_Symbol",
  "Nonspacing_Mark",
  "Open_Punctuation",
  "Other_Letter",
  "Other_Number",
  "Other_Punctuation",
  "Other_Symbol",
  "Paragraph_Separator",
  "Private_Use",
  "Space_Separator",
  "Spacing_Mark",
  "Surrogate",
  "Titlecase_Letter",
  "Unassigned",
  "Uppercase_Letter"
]

//https://www.npmjs.com/package/@unicode/unicode-15.1.0#readme
const blocks = [
  "Adlam",
  "Aegean_Numbers",
  "Ahom",
  "Alchemical_Symbols",
  "Alphabetic_Presentation_Forms",
  "Anatolian_Hieroglyphs",
  "Ancient_Greek_Musical_Notation",
  "Ancient_Greek_Numbers",
  "Ancient_Symbols",
  "Arabic",
  "Arabic_Extended_A",
  "Arabic_Extended_B",
  "Arabic_Extended_C",
  "Arabic_Mathematical_Alphabetic_Symbols",
  "Arabic_Presentation_Forms_A",
  "Arabic_Presentation_Forms_B",
  "Arabic_Supplement",
  "Armenian",
  "Arrows",
  "Avestan",
  "Balinese",
  "Bamum",
  "Bamum_Supplement",
  "Basic_Latin",
  "Bassa_Vah",
  "Batak",
  "Bengali",
  "Bhaiksuki",
  "Block_Elements",
  "Bopomofo",
  "Bopomofo_Extended",
  "Box_Drawing",
  "Brahmi",
  "Braille_Patterns",
  "Buginese",
  "Buhid",
  "Byzantine_Musical_Symbols",
  "CJK_Compatibility",
  "CJK_Compatibility_Forms",
  "CJK_Compatibility_Ideographs",
  "CJK_Compatibility_Ideographs_Supplement",
  "CJK_Radicals_Supplement",
  "CJK_Strokes",
  "CJK_Symbols_And_Punctuation",
  "CJK_Unified_Ideographs",
  "CJK_Unified_Ideographs_Extension_A",
  "CJK_Unified_Ideographs_Extension_B",
  "CJK_Unified_Ideographs_Extension_C",
  "CJK_Unified_Ideographs_Extension_D",
  "CJK_Unified_Ideographs_Extension_E",
  "CJK_Unified_Ideographs_Extension_F",
  "CJK_Unified_Ideographs_Extension_G",
  "CJK_Unified_Ideographs_Extension_H",
  "CJK_Unified_Ideographs_Extension_I",
  "Carian",
  "Caucasian_Albanian",
  "Chakma",
  "Cham",
  "Cherokee",
  "Cherokee_Supplement",
  "Chess_Symbols",
  "Chorasmian",
  "Combining_Diacritical_Marks",
  "Combining_Diacritical_Marks_Extended",
  "Combining_Diacritical_Marks_For_Symbols",
  "Combining_Diacritical_Marks_Supplement",
  "Combining_Half_Marks",
  "Common_Indic_Number_Forms",
  "Control_Pictures",
  "Coptic",
  "Coptic_Epact_Numbers",
  "Counting_Rod_Numerals",
  "Cuneiform",
  "Cuneiform_Numbers_And_Punctuation",
  "Currency_Symbols",
  "Cypriot_Syllabary",
  "Cypro_Minoan",
  "Cyrillic",
  "Cyrillic_Extended_A",
  "Cyrillic_Extended_B",
  "Cyrillic_Extended_C",
  "Cyrillic_Extended_D",
  "Cyrillic_Supplement",
  "Deseret",
  "Devanagari",
  "Devanagari_Extended",
  "Devanagari_Extended_A",
  "Dingbats",
  "Dives_Akuru",
  "Dogra",
  "Domino_Tiles",
  "Duployan",
  "Early_Dynastic_Cuneiform",
  "Egyptian_Hieroglyph_Format_Controls",
  "Egyptian_Hieroglyphs",
  "Elbasan",
  "Elymaic",
  "Emoticons",
  "Enclosed_Alphanumeric_Supplement",
  "Enclosed_Alphanumerics",
  "Enclosed_CJK_Letters_And_Months",
  "Enclosed_Ideographic_Supplement",
  "Ethiopic",
  "Ethiopic_Extended",
  "Ethiopic_Extended_A",
  "Ethiopic_Extended_B",
  "Ethiopic_Supplement",
  "General_Punctuation",
  "Geometric_Shapes",
  "Geometric_Shapes_Extended",
  "Georgian",
  "Georgian_Extended",
  "Georgian_Supplement",
  "Glagolitic",
  "Glagolitic_Supplement",
  "Gothic",
  "Grantha",
  "Greek_And_Coptic",
  "Greek_Extended",
  "Gujarati",
  "Gunjala_Gondi",
  "Gurmukhi",
  "Halfwidth_And_Fullwidth_Forms",
  "Hangul_Compatibility_Jamo",
  "Hangul_Jamo",
  "Hangul_Jamo_Extended_A",
  "Hangul_Jamo_Extended_B",
  "Hangul_Syllables",
  "Hanifi_Rohingya",
  "Hanunoo",
  "Hatran",
  "Hebrew",
  "High_Private_Use_Surrogates",
  "High_Surrogates",
  "Hiragana",
  "IPA_Extensions",
  "Ideographic_Description_Characters",
  "Ideographic_Symbols_And_Punctuation",
  "Imperial_Aramaic",
  "Indic_Siyaq_Numbers",
  "Inscriptional_Pahlavi",
  "Inscriptional_Parthian",
  "Javanese",
  "Kaithi",
  "Kaktovik_Numerals",
  "Kana_Extended_A",
  "Kana_Extended_B",
  "Kana_Supplement",
  "Kanbun",
  "Kangxi_Radicals",
  "Kannada",
  "Katakana",
  "Katakana_Phonetic_Extensions",
  "Kawi",
  "Kayah_Li",
  "Kharoshthi",
  "Khitan_Small_Script",
  "Khmer",
  "Khmer_Symbols",
  "Khojki",
  "Khudawadi",
  "Lao",
  "Latin_1_Supplement",
  "Latin_Extended_A",
  "Latin_Extended_Additional",
  "Latin_Extended_B",
  "Latin_Extended_C",
  "Latin_Extended_D",
  "Latin_Extended_E",
  "Latin_Extended_F",
  "Latin_Extended_G",
  "Lepcha",
  "Letterlike_Symbols",
  "Limbu",
  "Linear_A",
  "Linear_B_Ideograms",
  "Linear_B_Syllabary",
  "Lisu",
  "Lisu_Supplement",
  "Low_Surrogates",
  "Lycian",
  "Lydian",
  "Mahajani",
  "Mahjong_Tiles",
  "Makasar",
  "Malayalam",
  "Mandaic",
  "Manichaean",
  "Marchen",
  "Masaram_Gondi",
  "Mathematical_Alphanumeric_Symbols",
  "Mathematical_Operators",
  "Mayan_Numerals",
  "Medefaidrin",
  "Meetei_Mayek",
  "Meetei_Mayek_Extensions",
  "Mende_Kikakui",
  "Meroitic_Cursive",
  "Meroitic_Hieroglyphs",
  "Miao",
  "Miscellaneous_Mathematical_Symbols_A",
  "Miscellaneous_Mathematical_Symbols_B",
  "Miscellaneous_Symbols",
  "Miscellaneous_Symbols_And_Arrows",
  "Miscellaneous_Symbols_And_Pictographs",
  "Miscellaneous_Technical",
  "Modi",
  "Modifier_Tone_Letters",
  "Mongolian",
  "Mongolian_Supplement",
  "Mro",
  "Multani",
  "Musical_Symbols",
  "Myanmar",
  "Myanmar_Extended_A",
  "Myanmar_Extended_B",
  "NKo",
  "Nabataean",
  "Nag_Mundari",
  "Nandinagari",
  "New_Tai_Lue",
  "Newa",
  "Number_Forms",
  "Nushu",
  "Nyiakeng_Puachue_Hmong",
  "Ogham",
  "Ol_Chiki",
  "Old_Hungarian",
  "Old_Italic",
  "Old_North_Arabian",
  "Old_Permic",
  "Old_Persian",
  "Old_Sogdian",
  "Old_South_Arabian",
  "Old_Turkic",
  "Old_Uyghur",
  "Optical_Character_Recognition",
  "Oriya",
  "Ornamental_Dingbats",
  "Osage",
  "Osmanya",
  "Ottoman_Siyaq_Numbers",
  "Pahawh_Hmong",
  "Palmyrene",
  "Pau_Cin_Hau",
  "Phags_Pa",
  "Phaistos_Disc",
  "Phoenician",
  "Phonetic_Extensions",
  "Phonetic_Extensions_Supplement",
  "Playing_Cards",
  "Private_Use_Area",
  "Psalter_Pahlavi",
  "Rejang",
  "Rumi_Numeral_Symbols",
  "Runic",
  "Samaritan",
  "Saurashtra",
  "Sharada",
  "Shavian",
  "Shorthand_Format_Controls",
  "Siddham",
  "Sinhala",
  "Sinhala_Archaic_Numbers",
  "Small_Form_Variants",
  "Small_Kana_Extension",
  "Sogdian",
  "Sora_Sompeng",
  "Soyombo",
  "Spacing_Modifier_Letters",
  "Specials",
  "Sundanese",
  "Sundanese_Supplement",
  "Superscripts_And_Subscripts",
  "Supplemental_Arrows_A",
  "Supplemental_Arrows_B",
  "Supplemental_Arrows_C",
  "Supplemental_Mathematical_Operators",
  "Supplemental_Punctuation",
  "Supplemental_Symbols_And_Pictographs",
  "Supplementary_Private_Use_Area_A",
  "Supplementary_Private_Use_Area_B",
  "Sutton_SignWriting",
  "Syloti_Nagri",
  "Symbols_And_Pictographs_Extended_A",
  "Symbols_For_Legacy_Computing",
  "Syriac",
  "Syriac_Supplement",
  "Tagalog",
  "Tagbanwa",
  "Tags",
  "Tai_Le",
  "Tai_Tham",
  "Tai_Viet",
  "Tai_Xuan_Jing_Symbols",
  "Takri",
  "Tamil",
  "Tamil_Supplement",
  "Tangsa",
  "Tangut",
  "Tangut_Components",
  "Tangut_Supplement",
  "Telugu",
  "Thaana",
  "Thai",
  "Tibetan",
  "Tifinagh",
  "Tirhuta",
  "Toto",
  "Transport_And_Map_Symbols",
  "Ugaritic",
  "Unified_Canadian_Aboriginal_Syllabics",
  "Unified_Canadian_Aboriginal_Syllabics_Extended",
  "Unified_Canadian_Aboriginal_Syllabics_Extended_A",
  "Vai",
  "Variation_Selectors",
  "Variation_Selectors_Supplement",
  "Vedic_Extensions",
  "Vertical_Forms",
  "Vithkuqi",
  "Wancho",
  "Warang_Citi",
  "Yezidi",
  "Yi_Radicals",
  "Yi_Syllables",
  "Yijing_Hexagram_Symbols",
  "Zanabazar_Square",
  "Znamenny_Musical_Notation"
]

const nameExcludes = new Set([
  '<control>',
  'Hangul Syllable',
  'Non Private Use High Surrogate',
  'Private Use High Surrogate',
  'Low Surrogate',
  'Private Use',
  'Tangut Ideograph',
  'Tangut Ideograph Supplement',
  'CJK Ideograph',
  'CJK Ideograph Extension A',
  'CJK Ideograph Extension B',
  'CJK Ideograph Extension C',
  'CJK Ideograph Extension D',
  'CJK Ideograph Extension E',
  'CJK Ideograph Extension F',
  'CJK Ideograph Extension G',
  'CJK Ideograph Extension H',
  'CJK Ideograph Extension I',
  'Plane 15 Private Use',
  'Plane 16 Private Use'
])

const originals = Object.fromEntries(Array.from(require('@unicode/unicode-15.1.0/Names').entries()).filter(([codepoint, value]) => !nameExcludes.has(value)))
const corrections = require('@unicode/unicode-15.1.0/Names/Correction')
const controls = require('@unicode/unicode-15.1.0/Names/Control')
const abbreviations = require('@unicode/unicode-15.1.0/Names/Abbreviation')
const alternates = require('@unicode/unicode-15.1.0/Names/Alternate')
const figments = require('@unicode/unicode-15.1.0/Names/Figment')

const names = {}
for (const data of [corrections, originals, controls, abbreviations, alternates, figments]) {
  for (const [codepoint, nameData] of Object.entries(data)) {
    if(!names[codepoint]) {
      names[codepoint] = []
    }
    names[codepoint] = names[codepoint].concat(nameData)
  }
}

const ranges = {}
for (const block of blocks) {
  const codepoints = require(`@unicode/unicode-15.1.0/Block/${block}/code-points.js`)
  const first = codepoints[0]
  const last = codepoints[codepoints.length - 1]

  const length = last - first + 1
  if (length !== codepoints.length) {
    throw new Error(`Could not convert codepoints in block ${block} into a range`)
  }

  const lookup = new Set(codepoints)
  for (let codepoint = first; codepoint <= last; codepoint++) {
    if (!lookup.has(codepoint)) {
      throw new Error(`Missing codepoint ${codepoint}; range is not contiguous from ${first} to ${last} in block ${block}`)
    }
  }

  const name = block.replaceAll('_', ' ')
  ranges[name] = [first, last]
}

const data = Object.fromEntries(
  Object.entries(ranges).sort(([blockA, rangeA], [blockB, rangeB]) => rangeA[0] - rangeB[0])
)

const fs = require('fs')

// const blocks = require('@unicode/unicode-15.1.0/Block')
// const abbreviation = require('@unicode/unicode-15.1.0/Names/Abbreviation')

fs.writeFileSync('./src/assets/unicode.json', JSON.stringify(data, null, 2))
fs.writeFileSync('./src/assets/names.json', JSON.stringify(names, null, 2))
